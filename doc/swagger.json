{
  "swagger": "2.0",
  "info": {
    "description": "Authorization API",
    "version": "1.0.0",
    "title": "Virtual Security Module"
  },
  "basePath": "/",
  "paths": {
    "/authz/policies": {
      "post": {
        "description": "Creates a new authz policy",
        "tags": [
          "authz-policies"
        ],
        "operationId": "CreateAuthzPolicy",
        "parameters": [
          {
            "name": "AuthzPolicyEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AuthorizationPolicyEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/AuthzPolicyCreationResponse"
          }
        }
      }
    },
    "/authz/policies/{path}": {
      "get": {
        "description": "Returns an authz policy's info",
        "tags": [
          "authz-policies"
        ],
        "operationId": "GetAuthzPolicy",
        "responses": {
          "200": {
            "$ref": "#/responses/AuthzPolicyEntryResponse"
          }
        }
      },
      "delete": {
        "description": "Deletes an authz policy",
        "tags": [
          "authz-policies"
        ],
        "operationId": "DeleteAuthzPolicy",
        "responses": {}
      }
    },
    "/login": {
      "post": {
        "description": "First phase: client provides the username and gets back a challenge,\ndecrypted by the user's public key\nSecond phase: client decrypts the challenge with the user's private\nkey and provides it with the request; and gets a token",
        "tags": [
          "users"
        ],
        "summary": "Log-in. Expected to be invoked twice by a client:",
        "operationId": "Login",
        "parameters": [
          {
            "name": "LoginReq",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/LoginResp"
          }
        }
      }
    },
    "/namespaces": {
      "post": {
        "description": "Creates a new namespace",
        "tags": [
          "namespaces"
        ],
        "operationId": "CreateNamespace",
        "parameters": [
          {
            "name": "NamespaceEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NamespaceEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/NamespaceCreationResponse"
          }
        }
      }
    },
    "/namespaces*": {
      "get": {
        "description": "Retrieves a namespace",
        "tags": [
          "namespaces"
        ],
        "operationId": "GetNamespace",
        "responses": {
          "200": {
            "$ref": "#/responses/NamespaceEntryResponse"
          }
        }
      },
      "delete": {
        "description": "Deletes a namespace",
        "tags": [
          "namespaces"
        ],
        "operationId": "DeleteNamespace",
        "responses": {}
      }
    },
    "/secrets": {
      "post": {
        "description": "Creates a new secret",
        "tags": [
          "secrets"
        ],
        "operationId": "CreateSecret",
        "parameters": [
          {
            "name": "SecretEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SecretEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/SecretCreationResponse"
          }
        }
      }
    },
    "/secrets/{path}": {
      "get": {
        "description": "Retrieves a secret",
        "tags": [
          "secrets"
        ],
        "operationId": "GetSecret",
        "responses": {
          "200": {
            "$ref": "#/responses/SecretEntryResponse"
          }
        }
      },
      "delete": {
        "description": "Deletes a secret",
        "tags": [
          "secrets"
        ],
        "operationId": "DeleteSecret",
        "responses": {}
      }
    },
    "/users": {
      "post": {
        "description": "Creates a new user",
        "tags": [
          "users"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "UserEntry",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/UserCreationResponse"
          }
        }
      }
    },
    "/users/{username}": {
      "get": {
        "description": "Returns a user's info",
        "tags": [
          "users"
        ],
        "operationId": "GetUser",
        "responses": {
          "200": {
            "$ref": "#/responses/UserEntryResponse"
          }
        }
      },
      "delete": {
        "description": "Deletes a user",
        "tags": [
          "users"
        ],
        "operationId": "DeleteUser",
        "responses": {}
      }
    }
  },
  "definitions": {
    "AuthorizationPolicyEntry": {
      "type": "object",
      "properties": {
        "allowedOperations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "x-go-name": "AllowedOperations"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "roleLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleLabels"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string",
          "x-go-name": "Challenge"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "challengeOrToken": {
          "type": "string",
          "x-go-name": "ChallengeOrToken"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "NamespaceEntry": {
      "type": "object",
      "properties": {
        "childPaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ChildPaths"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "roleLabels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "RoleLabels"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "Operation": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "RoleEntry": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "x-go-name": "Label"
        },
        "scope": {
          "type": "string",
          "x-go-name": "Scope"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "SecretEntry": {
      "type": "object",
      "properties": {
        "expirationTime": {
          "x-go-name": "ExpirationTime"
        },
        "id": {
          "type": "string",
          "x-go-name": "Id"
        },
        "metaData": {
          "type": "string",
          "x-go-name": "MetaData"
        },
        "owner": {
          "type": "string",
          "x-go-name": "Owner"
        },
        "secretData": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "SecretData"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    },
    "UserEntry": {
      "type": "object",
      "properties": {
        "credentials": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Credentials"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleEntry"
          },
          "x-go-name": "Roles"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/vmware/virtual-security-module/model"
    }
  },
  "responses": {
    "AuthzPolicyCreationResponse": {
      "schema": {
        "type": "object",
        "properties": {
          "AuthzPolicyId": {
            "type": "string"
          }
        }
      }
    },
    "AuthzPolicyEntryResponse": {
      "schema": {
        "$ref": "#/definitions/AuthorizationPolicyEntry"
      }
    },
    "LoginResp": {
      "schema": {
        "$ref": "#/definitions/LoginResponse"
      }
    },
    "NamespaceCreationResponse": {
      "schema": {
        "type": "object",
        "properties": {
          "NamespaceId": {
            "type": "string"
          }
        }
      }
    },
    "NamespaceEntryResponse": {
      "schema": {
        "$ref": "#/definitions/NamespaceEntry"
      }
    },
    "SecretCreationResponse": {
      "schema": {
        "type": "object",
        "properties": {
          "SecretId": {
            "type": "string"
          }
        }
      }
    },
    "SecretEntryResponse": {
      "schema": {
        "$ref": "#/definitions/SecretEntry"
      }
    },
    "UserCreationResponse": {
      "schema": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string"
          }
        }
      }
    },
    "UserEntryResponse": {
      "schema": {
        "$ref": "#/definitions/UserEntry"
      }
    }
  }
}